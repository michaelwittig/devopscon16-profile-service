{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "RepositoryName": {
      "Type": "String"
    },
    "ServiceName": {
      "Type": "String"
    }
  },
  "Resources": {
    "PipelineRole": {
       "Type": "AWS::IAM::Role",
       "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Principal": {
                "Service": ["codepipeline.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }]
          },
          "ManagedPolicyArns": ["arn:aws:iam::aws:policy/AdministratorAccess"]
       }
    },
    "DeployLambdaRole": {
       "Type": "AWS::IAM::Role",
       "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Principal": {
                "Service": ["lambda.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }]
          },
          "ManagedPolicyArns": ["arn:aws:iam::aws:policy/AdministratorAccess"]
       }
    },
    "ArtifactStore": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
      }
    },
    "DeployLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {"Fn::Join": ["", [
            "import boto3","\n",
            "import botocore","\n",
            "import zipfile","\n",
            "import logging","\n",
            "logger = logging.getLogger()","\n",
            "logger.setLevel(logging.INFO)","\n",
            "","\n",
            "def extractTemplate(zipFile, sourceFile, destinationDir):","\n",
            "  found = False","\n",
            "  try:","\n",
            "    f = open(zipFile, 'rb')","\n",
            "    z = zipfile.ZipFile(f)","\n",
            "    for name in z.namelist():","\n",
            "      if name == sourceFile:","\n",
            "        z.extract(name, destinationDir)","\n",
            "        found = True","\n",
            "  finally:","\n",
            "    f.close()","\n",
            "  if found == False:","\n",
            "    raise Exception('sourceFile not found in zipFile')","\n",
            "","\n",
            "def readFile(file):","\n",
            "  try:","\n",
            "    f = open(file, 'r')","\n",
            "    return f.read()","\n",
            "  finally:","\n",
            "    f.close()","\n",
            "","\n",
            "def jobDone(jobId, context, data):","\n",
            "  logger.error('jobDone:{}'.format(message))","\n",
            "  cpClient = boto3.client('codepipeline')","\n",
            "  cpClient.put_job_success_result(jobId=jobId)","\n",
            "","\n",
            "def jobFailed(jobId, context, message):","\n",
            "  logger.error('jobFailed:{}'.format(message))","\n",
            "  cpClient = boto3.client('codepipeline')","\n",
            "  cpClient.put_job_failure_result(","\n",
            "    jobId=jobId,","\n",
            "    failureDetails={","\n",
            "        'type': 'JobFailed',","\n",
            "        'message': message,","\n",
            "        'externalExecutionId': context.aws_request_id","\n",
            "    })","\n",
            "","\n",
            "def existsStack(stackName):","\n",
            "  cfnClient = boto3.client('cloudformation')","\n",
            "  try:","\n",
            "    stack = cfnClient.describe_stacks(StackName=stackName)","\n",
            "    return True","\n",
            "  except botocore.exceptions.ClientError as e:","\n",
            "    return False","\n",
            "","\n",
            "def updateStack(stackName, templateFile, s3Location):","\n",
            "  cfnClient = boto3.client('cloudformation')","\n",
            "  cfnClient.update_stack(","\n",
            "    StackName=stackName,","\n",
            "    TemplateBody=readFile(templateFile),","\n",
            "    Parameters=[","\n",
            "      {","\n",
            "        'ParameterKey': 'CodeS3Bucket',","\n",
            "        'ParameterValue': s3Location['bucketName']","\n",
            "      },","\n",
            "      {","\n",
            "        'ParameterKey': 'CodeS3Key',","\n",
            "        'ParameterValue': s3Location['objectKey']","\n",
            "      }","\n",
            "    ],","\n",
            "    Capabilities=['CAPABILITY_IAM']","\n",
            "  )","\n",
            "  cfnClient.get_waiter('stack_update_complete').wait(","\n",
            "    StackName=stackName,","\n",
            "  )","\n",
            "","\n",
            "def createStack(stackName, templateFile, s3Location):","\n",
            "  cfnClient = boto3.client('cloudformation')","\n",
            "  cfnClient.create_stack(","\n",
            "    StackName=stackName,","\n",
            "    TemplateBody=readFile(templateFile),","\n",
            "    Parameters=[","\n",
            "      {","\n",
            "        'ParameterKey': 'CodeS3Bucket',","\n",
            "        'ParameterValue': s3Location['bucketName']","\n",
            "      },","\n",
            "      {","\n",
            "        'ParameterKey': 'CodeS3Key',","\n",
            "        'ParameterValue': s3Location['objectKey']","\n",
            "      }","\n",
            "    ],","\n",
            "    Capabilities=['CAPABILITY_IAM']","\n",
            "  )","\n",
            "  cfnClient.get_waiter('stack_create_complete').wait(","\n",
            "    StackName=stackName,","\n",
            "  )","\n",
            "","\n",
            "def handler(event, context):","\n",
            "  logger.info('handler:{}'.format(event))","\n",
            "  jobId = event['CodePipeline.job']['id']","\n",
            "  try:","\n",
            "    artifactCredentials = event['CodePipeline.job']['data']['artifactCredentials']","\n",
            "    inputArtifact = event['CodePipeline.job']['data']['inputArtifacts'][0]","\n",
            "    s3Location = inputArtifact['location']['s3Location']","\n",
            "    s3Client = boto3.client(","\n",
            "      's3',","\n",
            "      aws_access_key_id=artifactCredentials['accessKeyId'],","\n",
            "      aws_secret_access_key=artifactCredentials['secretAccessKey'],","\n",
            "      aws_session_token=artifactCredentials['sessionToken'],","\n",
            "      config=botocore.client.Config(signature_version='s3v4'),","\n",
            "    )","\n",
            "    s3Client.download_file(s3Location['bucketName'], s3Location['objectKey'], '/tmp/artifact.zip')","\n",
            "    extractTemplate('/tmp/artifact.zip', 'service.json', '/tmp/')","\n",
            "    if existsStack('", {"Ref": "ServiceName"}, "'):","\n",
            "      updateStack('", {"Ref": "ServiceName"}, "', '/tmp/service.json', s3Location)","\n",
            "    else:","\n",
            "      createStack('", {"Ref": "ServiceName"}, "', '/tmp/service.json', s3Location)","\n",
            "    jobDone(jobId, context, 'done')","\n",
            "  except Exception as e:","\n",
            "    logger.error('exception:{}'.format(event))","\n",
            "    jobFailed(jobId, context, str(e))","\n",
            "  return {}","\n"
          ]]}
        },
        "Handler": "index.handler",
        "MemorySize": 256,
        "Role": {"Fn::GetAtt": ["DeployLambdaRole", "Arn"]},
        "Runtime": "python2.7",
        "Timeout": 300
      }
    },
    "Pipeline": {
      "Type": "AWS::CodePipeline::Pipeline",
      "Properties": {
        "Name": {"Fn::Join": ["", [{"Ref": "ServiceName"}, "-pipeline"]]},
        "RoleArn": {"Fn::GetAtt": ["PipelineRole", "Arn"]},
        "ArtifactStore": {
          "Type": "S3",
          "Location": {"Ref": "ArtifactStore"}
        },
        "DisableInboundStageTransitions": [{
          "Reason": "Manual interaction needed",
          "StageName": "Test-Bundle"
        }],
        "Stages": [{
          "Name": "Source",
          "Actions": [{
            "Name": "SourceAction",
            "ActionTypeId": {
              "Category": "Source",
              "Owner": "AWS",
              "Version": "1",
              "Provider": "CodeCommit"
            },
            "OutputArtifacts": [{
              "Name": "SourceOutput"
            }],
            "Configuration": {
              "RepositoryName": {"Ref": "RepositoryName"},
              "BranchName": "master"
            },
            "RunOrder": 1
          }]
        }, {
          "Name": "Test-Bundle",
          "Actions": [{
            "Name": "Test-BundleAction",
            "ActionTypeId": {
              "Category": "Build",
              "Owner": "ThirdParty",
              "Version": "1",
              "Provider": "SolanoCI"
            },
            "InputArtifacts": [{
              "Name": "SourceOutput"
            }],
            "OutputArtifacts": [{
              "Name": "BundleOutput"
            }],
            "Configuration": {
              "SuiteId": "460332",
              "ClientId": "e7c78b64-17c8-4f9b-a0ac-790414db012a",
              "ClientToken": "XXX"
            },
            "RunOrder": 1
          }]
        }, {
          "Name": "Deploy",
          "Actions": [{
            "Name": "DeployAction",
            "ActionTypeId": {
              "Category": "Invoke",
              "Owner": "AWS",
              "Version": "1",
              "Provider": "Lambda"
            },
            "InputArtifacts": [{
              "Name": "BundleOutput"
            }],
            "Configuration": {
              "FunctionName": {"Ref": "DeployLambda"}
            },
            "RunOrder": 1
          }]
        }]
      }
    }
  }
}